generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Snippet {
  id         Int      @id @default(autoincrement())
  title      String
  code       String
  desc       String?
  accountId  String
  languageId String
  // Relations
  account    Account  @relation(fields: [accountId], references: [id])
  language   Language @relation(fields: [languageId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Language {
  id           String         @id @default(cuid())
  name         String
  usedFor      String         @db.Text
  history      String         @db.Text
  logoUrl      String
  creators     Creators[]
  courses      Courses[]
  books        Books[]
  videos       Videos[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Snippet      Snippet[]
  TalkingPoint TalkingPoint[]
}

model Creators {
  id         String   @id @default(cuid())
  name       String
  desc       String
  link       String
  imageUrl   String
  Language   Language @relation(fields: [languageId], references: [id])
  languageId String
}

model Courses {
  id         String   @id @default(cuid())
  name       String
  desc       String
  link       String
  imageUrl   String
  author     String
  Language   Language @relation(fields: [languageId], references: [id])
  languageId String
}

model Books {
  id         String   @id @default(cuid())
  name       String
  desc       String
  link       String
  imageUrl   String
  author     String
  Language   Language @relation(fields: [languageId], references: [id])
  languageId String
}

model Videos {
  id         String   @id @default(cuid())
  link       String
  Language   Language @relation(fields: [languageId], references: [id])
  languageId String
}

model TalkingPoint {
  id      String @id @default(cuid())
  title   String
  desc    String
  userId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  language   Language  @relation(fields: [languageId], references: [id])
  comments   Comment[]
  languageId String
}

model Comment {
  id       String  @id @default(cuid())
  content  String
  talkingPointId   String
  userId   String
  parentId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent       Comment?     @relation("Comments", fields: [parentId], references: [id], onDelete: Cascade)
  talkingPoint TalkingPoint @relation(fields: [id], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  children     Comment[]    @relation("Comments")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Snippet Snippet[]

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Comment       Comment[]
  TalkingPoint TalkingPoint[]
  Comment      Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
